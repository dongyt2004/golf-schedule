export declare type RecursivePartial<T> = {
    [P in keyof T]?: T[P] extends Array<infer U> ? Array<RecursivePartial<U>> : T[P] extends object ? RecursivePartial<T[P]> : T[P];
};
declare type PluginNameType<Plugin, Plugins> = Plugin extends keyof Plugins ? Plugin : never;
export declare type IPluginNames<Plugins> = {
    [k in keyof Plugins]: PluginNameType<k, Plugins>;
};
export declare enum NumberedBoolean {
    FALSE = 0,
    TRUE = 1
}
export {};
