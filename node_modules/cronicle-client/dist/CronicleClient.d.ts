import { IAbortJobRequest, IBasicResponse, ICreateEventRequest, ICreateEventResponse, IDeleteEventRequest, IGetEventRequest, IGetEventResponse, IGetJobStatusRequest, IGetJobStatusResponse, IGetScheduleRequest, IGetScheduleResponse, IRunEventRequest, IRunEventResponse, IUpdateEventRequest, IUpdateJobRequest } from './requestResponseTypes';
import { IBasePlugins } from './plugins';
export declare enum BaseTargets {
    ALL = "allgrp",
    MAIN = "maingrp"
}
export declare enum BaseCategories {
    GENERAL = "general"
}
export interface ICronicleClientOptions {
    masterUrl: string;
    apiKey: string;
}
export declare class CronicleClient<Categories extends string = BaseCategories, Targets extends string = BaseTargets, Plugins = IBasePlugins> {
    private readonly _headers;
    private readonly _baseUrl;
    constructor(opts: ICronicleClientOptions);
    createEvent<Plugin extends keyof Plugins>(req: ICreateEventRequest<Plugin, Plugins, Targets, Categories>, enforceUnique?: boolean): Promise<ICreateEventResponse>;
    getEvent<Plugin extends keyof Plugins = any>(req: IGetEventRequest): Promise<IGetEventResponse<Plugin, Plugins, Targets, Categories>>;
    getJobStatus<Plugin extends keyof Plugins = any>(req: IGetJobStatusRequest): Promise<IGetJobStatusResponse<Plugin, Plugins, Targets, Categories>>;
    runEvent<Plugin extends keyof Plugins = any>(req: IRunEventRequest<Plugin, Plugins, Targets, Categories>): Promise<IRunEventResponse>;
    updateEvent<Plugin extends keyof Plugins = any>(req: IUpdateEventRequest<Plugin, Plugins, Targets, Categories>): Promise<IBasicResponse>;
    updateJob(req: IUpdateJobRequest): Promise<IBasicResponse>;
    deleteEvent(req: IDeleteEventRequest): Promise<IBasicResponse>;
    abortJob(req: IAbortJobRequest): Promise<IBasicResponse>;
    getSchedule(req?: IGetScheduleRequest): Promise<IGetScheduleResponse<any, Plugins, Targets, Categories>>;
    private _executeRequest;
    private _buildRequest;
    private _getMethodUrl;
}
