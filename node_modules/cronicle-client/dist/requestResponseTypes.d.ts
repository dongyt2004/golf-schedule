import { ICreatedEvent, IEvent, IJob } from './dataTypes';
import { NumberedBoolean, RecursivePartial } from './helperTypes';
export interface ICreateEventRequest<Plugin extends keyof Plugins, Plugins, Targets extends string, Categories extends string> extends Partial<IEvent<Plugin, Plugins, Targets, Categories>> {
    title: string;
    enabled: NumberedBoolean;
    category: Categories;
    target: Targets;
    plugin: Plugin;
    params: Plugins[Plugin];
    id?: string;
}
export interface IIdRequest {
    id: string;
}
export interface ITitleRequest {
    title: string;
}
export declare type IdOrTitleRequest = IIdRequest | ITitleRequest;
export declare type IGetEventRequest = IdOrTitleRequest;
export declare type IGetJobStatusRequest = IIdRequest;
export declare type IRunEventRequest<Plugin extends keyof Plugins, Plugins, Targets extends string, Categories extends string> = IdOrTitleRequest & RecursivePartial<IEvent<Plugin, Plugins, Targets, Categories>>;
export declare type IUpdateEventRequest<Plugin extends keyof Plugins, Plugins, Targets extends string, Categories extends string> = IIdRequest & {
    reset_cursor?: NumberedBoolean;
    abort_jobs?: NumberedBoolean;
} & RecursivePartial<IEvent<Plugin, Plugins, Targets, Categories>>;
export declare type IUpdateJobRequest = IIdRequest & {
    timeout?: number;
    retries?: number;
    retry_delay?: number;
    chain?: string;
    chain_error?: string;
    notify_success?: string;
    notify_fail?: string;
    web_hook?: string;
    cpu_limit?: number;
    cpu_sustain?: number;
    memory_limit?: number;
    memory_sustain?: number;
    log_max_size?: number;
};
export declare type IDeleteEventRequest = IIdRequest;
export declare type IAbortJobRequest = IIdRequest;
export interface IGetScheduleRequest {
    offset?: number;
    limit?: number;
}
export interface IBasicResponse {
    code: 0 | number | string;
}
export interface IErrorResponse extends IBasicResponse {
    description: string;
}
export interface ICreateEventResponse extends IBasicResponse {
    id: string;
}
export interface IGetScheduleResponse<Plugin extends keyof Plugins, Plugins, Targets extends string, Categories extends string> extends IBasicResponse {
    rows: Array<ICreatedEvent<Plugin, Plugins, Targets, Categories>>;
    list: {
        page_size: number;
        first_page: number;
        last_page: number;
        length: number;
        type: 'list';
    };
}
export interface IRunEventResponse extends IBasicResponse {
    ids: string[];
    queue?: number;
}
export interface IGetEventResponse<Plugin extends keyof Plugins, Plugins, Targets extends string, Categories extends string> extends IBasicResponse {
    event: ICreatedEvent<Plugin, Plugins, Targets, Categories>;
}
export interface IGetJobStatusResponse<Plugin extends keyof Plugins, Plugins, Targets extends string, Categories extends string> extends IBasicResponse {
    job: IJob<Plugin, Plugins, Targets, Categories>;
}
